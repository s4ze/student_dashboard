// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using courses.Data;
using courses.Models;

#nullable disable

namespace courses.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241224081315_2Migration")]
    partial class _2Migration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("courses.Models.Course", b =>
                {
                    b.Property<Guid>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("VARCHAR(25)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("VARCHAR(256)");

                    b.HasKey("CourseId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("courses.Models.Enrollment", b =>
                {
                    b.Property<Guid>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<string>("EnrollmentDate")
                        .IsRequired()
                        .HasColumnType("VARCHAR(10)");

                    b.Property<float>("Grade")
                        .HasColumnType("NUMERIC(3,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("EnrollmentId");

                    b.HasIndex("CourseId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("courses.Models.Schedule", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<LessonDay>("Friday")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasColumnType("VARCHAR(10)");

                    b.Property<LessonDay>("Monday")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<LessonDay>("Saturday")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<LessonDay>("Thursday")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<LessonDay>("Tuesday")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<LessonDay>("Wednesday")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("ScheduleId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("courses.Models.Enrollment", b =>
                {
                    b.HasOne("courses.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });
#pragma warning restore 612, 618
        }
    }
}
